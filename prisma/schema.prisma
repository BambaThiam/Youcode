// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

model Account {
  id                    String  @id @default(cuid())
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  // Establish a relation to the 'User' model where 'userId' in this model matches 'id' in the User model.
  // onDelete Cascade means if the User is deleted, the related Account(s) will also be deleted.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Ensure that each combination of 'provider' and 'providerAccountId' is unique across all Account records.
  @@unique([provider, providerAccountId])
}

// Définit un modèle Prisma nommé 'Session' pour représenter les sessions utilisateur dans la base de données.
model Session {
  id           String   @id @default(cuid())              // Identifiant unique pour la session, par défaut à un ID globalement unique généré par Prisma.
  sessionToken String   @unique @map("session_token")     // Token unique identifiant la session. Mappé sur le champ 'session_token' dans la base de données réelle.
  userId       String   @map("user_id")                   // Clé étrangère faisant référence à l'ID de l'utilisateur associé. Mappé sur le champ 'user_id' dans la base de données.
  expires      DateTime                                   // La date et l'heure d'expiration de la session.

  // Configure une relation avec le modèle 'User', où 'userId' dans ce modèle correspond à 'id' dans le modèle User.
  // onDelete Cascade signifie que si l'Utilisateur est supprimé, les Sessions associées seront également supprimées.
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Définit automatiquement la date et l'heure de création de la session lorsqu'elle est créée.
  // C'est mappé sur 'created_at' dans la base de données réelle.
  createdAt    DateTime @default(now()) @map("created_at")

  // Mappe ce modèle sur la table 'sessions' dans la base de données réelle.
  @@map("sessions")
}
// Un modèle Prisma pour gérer les tokens de vérification (comme pour la vérification des emails).
model VerificationToken {
  identifier String   // Un identifiant pour associer le token à un utilisateur (peut être l'email).
  token      String   @unique  // Le token de vérification lui-même, doit être unique.
  expires    DateTime // Date d'expiration du token de vérification.

  // Contrainte d'unicité pour s'assurer qu'il n'y a pas de paires doublons entre 'identifier' et 'token'.
  @@unique([identifier, token])
  
  // Mappe ce modèle sur la table 'verificationtokens' dans la base de données réelle.
  @@map("verificationtokens")
}

// Un modèle Prisma pour représenter les utilisateurs dans le système.
model User {
  id            String    @id @default(cuid())   // Identifiant unique pour l'utilisateur, par défaut à un ID généré par Prisma.
  name          String?                         // Nom de l'utilisateur, peut être nul.
  email         String?   @unique               // Email de l'utilisateur, doit être unique et peut être nul.
  emailVerified DateTime?                       // La date et l'heure de la vérification de l'email, peut être nulle.
  image         String?                         // URL de l'image de profil de l'utilisateur, peut être nulle.
  createdAt     DateTime  @default(now())       // Date et heure de création du compte de l'utilisateur.
  updatedAt     DateTime  @updatedAt            // Date et heure de la dernière mise à jour du compte de l'utilisateur, mis à jour automatiquement.

  // Relations avec d'autres modèles. L'utilisateur peut avoir plusieurs comptes, sessions, cours possédés ou créés, et leçons.
  accounts      Account[]                      // Liste des comptes associés à l'utilisateur.
  sessions      Session[]                      // Liste des sessions associées à l'utilisateur.
  ownedCourses  CourseOnUser[]                // Liste des cours possédés par l'utilisateur.
  createdCourses Course[]                     // Liste des cours créés par l'utilisateur.
  lessons        LessonOnUser[]               // Liste des leçons associées à l'utilisateur.
}

//Cours qui sont crées
// Un modèle Prisma pour représenter les cours dans le système.
model Course {
  id           String   @id @default(cuid()) // Identifiant unique du cours, généré automatiquement par Prisma.
  name         String                       // Nom du cours.
  presentation String                       // Description du cours qui sera formatée en markdown.
  image        String                       // URL de l'image associée au cours.
  createdAt    DateTime @default(now())     // Date et heure de création du cours.

  creatorId    String                       // Identifiant unique de l'utilisateur qui a créé le cours.
  creator User @relation(fields: [creatorId], references: [id]) // Le cours est lié à son créateur (un utilisateur).
  lessons Lesson[]                          // Les cours ont une liste de leçons associées.
  users CourseOnUser[]                      // Liste des associations entre un cours et ses utilisateurs.
}

// Un modèle Prisma pour représenter les leçons.
model Lesson {
  id      String      @id @default(cuid()) // Identifiant unique de la leçon, généré automatiquement par Prisma.
  name    String                           // Nom de la leçon.
  rank    String                           // Chaîne indiquant l'ordre de la leçon.
  content String                           // Contenu de la leçon, qui sera formaté en markdown.
  state   LessonState @default(HIDDEN)     // État de publication de la leçon, 'HIDDEN' par défaut.

  createdAt DateTime       @default(now()) // Date et heure de création de la leçon.
  course    Course         @relation(fields: [courseId], references: [id]) // La leçon est liée à un cours spécifique.
  courseId  String                          // Identifiant unique du cours auquel la leçon appartient.
  users     LessonOnUser[]                  // Liste des associations entre une leçon et ses utilisateurs.
}

// Enumération représentant les différents états de visibilité de la leçon.
enum LessonState {
  HIDDEN     // La leçon est cachée.
  PUBLISHED  // La leçon est publiée mais pas publique.
  PUBLIC     // La leçon est publique.
}

// Modèle représentant la relation entre une leçon et un utilisateur, notamment leur progression.
model LessonOnUser {
  id        String   @id @default(cuid()) // Identifiant unique de l'association.
  userId    String                        // Identifiant de l'utilisateur.
  lessonId  String                        // Identifiant de la leçon.
  progress  Progress @default(NOT_STARTED) // Progrès de l'utilisateur sur la leçon, 'NOT_STARTED' par défaut.
  createdAt DateTime @default(now())       // Date et heure de création de l'association.

  user   User   @relation(fields: [userId], references: [id]) // La relation est associée à un utilisateur spécifique.
  lesson Lesson @relation(fields: [lessonId], references: [id]) // La relation est associée à une leçon spécifique.
  @@unique([userId, lessonId]) // Assure que la combinaison utilisateur-leçon est unique.
}

// Enumération représentant les différents états de progression de l'utilisateur sur une leçon.
enum Progress {
  NOT_STARTED  // La leçon n'a pas encore été commencée.
  IN_PROGRESS  // La leçon est en cours.
  COMPLETED    // La leçon est terminée.
}

// Modèle représentant la relation entre un utilisateur et un cours.
model CourseOnUser {
  id         String    @id @default(cuid()) // Identifiant unique de l'association.
  userId     String                         // Identifiant de l'utilisateur.
  courseId   String                         // Identifiant du cours.
  createdAt  DateTime  @default(now())      // Date et heure de création de l'association.
  canceledAt DateTime?                      // Date et heure d'annulation du cours, si applicable.

  user   User   @relation(fields: [userId], references: [id]) // La relation est associée à un utilisateur spécifique.
  course Course @relation(fields: [courseId], references: [id]) // La relation est associée à un cours spécifique.
  @@unique([userId, courseId]) // Assure que la combinaison utilisateur-cours est unique.
}




